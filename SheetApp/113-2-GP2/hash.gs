/**
 * Generate Hash from two input: public and secret.
 * 
 * @param {string|number} input  The public input.
 * @param {string}        secret Hidden input working as a salt.
 * @return The public input followed by the generated hash.
 * @customfunction
 */
function generateHash(input, secret){
  var inputDigits = input.toString().replace(/[^\d]/g, "", );
  var rawHash = Utilities.computeDigest(Utilities.DigestAlgorithm.SHA_1, inputDigits + secret);
  var letters = "ABEFGHKLMNPRTWXY";
  var textHash = inputDigits + "-";
  // buggy hash is generated; patch checkHash strangely...
  while(textHash.length < 4){
    textHash = "0" + textHash;
  }
  for (let j = 0; j < 3; j++) {
    textHash += letters[Math.abs(rawHash[j] % 16)];
  }
  return textHash;
}

/**
 * Check if Hash is correct.
 * 
 * @param {string} input  The string that should have been generated by generateHash().
 * @param {string} secret Hidden input working as a salt.
 * @return Boolean describing the hash's validity.
 * @customfunction
 */
function checkHash(input, secret){
  var inputDigits = input.toString().replace(/[^\d]/g, "");
  // dirty fix
  inputDigits2 = inputDigits.replace(/^0+/g, "");
  var inputAlph = input.toString().replace(/[^A-Za-z]/g, "").toUpperCase();
  return generateHash(inputDigits2, secret) == inputDigits + "-" + inputAlph;
}
